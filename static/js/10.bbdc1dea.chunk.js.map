{"version":3,"sources":["components/ExperienceCard/ExperienceCard.tsx","containers/WorkExperience/WorkExperience.tsx"],"names":["ExperienceCard","cardInfo","isDark","imgRef","createRef","values","className","style","background","rgbColor","join","company","crossOrigin","ref","src","companylogo","alt","role","date","desc","descBullets","map","item","i","GetDescBullets","WorkExperience","useContext","StyleContext","workExperiences","display","id","triggerOnce","direction","duration","experience","card"],"mappings":"8LA8FeA,EA9EsC,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAC1DC,EAA4CC,sBAQlD,IANaC,EAsBb,OACE,sBAAKC,UAAWJ,EAAS,uBAAyB,kBAAlD,UACE,sBACEK,MAAO,CAAEC,YAzBFH,EAyBkBJ,EAASQ,SAxBb,qBAAXJ,EACV,GACA,OAASA,EAAOK,KAAK,MAAQ,MAuB7BJ,UAAU,oBAFZ,UAIE,qBAAKA,UAAU,2BACf,qBAAKA,UAAU,yBAAf,SACE,oBAAIA,UAAU,0BAAd,SAAyCL,EAASU,YAGpD,qBACEC,YAAa,YACbC,IAAKV,EACLG,UAAU,wBACVQ,IAAKb,EAASc,YACdC,IAAKf,EAASU,aAGlB,sBAAKL,UAAU,0BAAf,UACE,oBACEA,UACEJ,EACI,sCACA,uBAJR,SAOGD,EAASgB,OAEZ,oBACEX,UACEJ,EACI,sCACA,uBAJR,SAOGD,EAASiB,OAEZ,mBACEZ,UACEJ,EACI,+CACA,gCAJR,SAOGD,EAASkB,OAEZ,6BA/DiB,SACrBC,EACAlB,GAEA,OAAOkB,EACHA,EAAYC,KAAI,SAACC,EAAMC,GAAP,OAChB,oBAEEjB,UAAWJ,EAAS,0BAA4B,WAFlD,SAIGoB,GAHIC,MAMP,KAkDKC,CAAevB,EAASmB,YAAalB,Y,sBC5CnCuB,UArCkB,WAC/B,IAAQvB,EAAWwB,qBAAWC,KAAtBzB,OACR,OAAI0B,IAAgBC,QAEhB,qBAAKC,GAAG,aAAR,SACE,cAAC,IAAD,CAAMC,aAAW,EAACC,UAAU,QAAQC,SAAU,IAA9C,SACE,qBAAK3B,UAAU,uBAAuBwB,GAAG,iBAAzC,SACE,gCACE,oBAAIxB,UAAU,qBAAd,yBACA,qBAAKA,UAAU,uBAAf,SACGsB,IAAgBM,WAAWb,KAAI,SAACc,EAAMZ,GACrC,OACE,cAAC,EAAD,CAEErB,OAAQA,EACRD,SAAU,CACRU,QAASwB,EAAKxB,QACdQ,KAAMgB,EAAKhB,KACXD,KAAMiB,EAAKjB,KACXT,SAAU0B,EAAK1B,SACfM,YAAaoB,EAAKpB,YAClBE,KAAMkB,EAAKlB,KACXG,YAAae,EAAKf,cATfG,iBAqBlB","file":"static/js/10.bbdc1dea.chunk.js","sourcesContent":["import React, { createRef } from \"react\";\nimport \"./ExperienceCard.scss\";\n\ninterface CardInfoType {\n  company: string;\n  desc: string;\n  date: string;\n  companylogo: string;\n  role: string;\n  rgbColor?: Array<string>;\n  descBullets?: Array<string>;\n}\ninterface ExperienceCardType {\n  cardInfo: CardInfoType;\n  isDark: boolean;\n}\nconst ExperienceCard: React.FC<ExperienceCardType> = ({ cardInfo, isDark }) => {\n  const imgRef: React.RefObject<HTMLImageElement> = createRef();\n\n  function rgb(values?: Array<string>) {\n    return typeof values === \"undefined\"\n      ? \"\"\n      : \"rgb(\" + values.join(\", \") + \")\";\n  }\n\n  const GetDescBullets = (\n    descBullets: Array<string> | undefined,\n    isDark: boolean\n  ) => {\n    return descBullets\n      ? descBullets.map((item, i) => (\n        <li\n          key={i}\n          className={isDark ? \"subTitle dark-mode-text\" : \"subTitle\"}\n        >\n          {item}\n        </li>\n      ))\n      : null;\n  };\n\n  return (\n    <div className={isDark ? \"experience-card-dark\" : \"experience-card\"}>\n      <div\n        style={{ background: rgb(cardInfo.rgbColor) }}\n        className=\"experience-banner\"\n      >\n        <div className=\"experience-blurred_div\"></div>\n        <div className=\"experience-div-company\">\n          <h5 className=\"experience-text-company\">{cardInfo.company}</h5>\n        </div>\n\n        <img\n          crossOrigin={\"anonymous\"}\n          ref={imgRef}\n          className=\"experience-roundedimg\"\n          src={cardInfo.companylogo}\n          alt={cardInfo.company}\n        />\n      </div>\n      <div className=\"experience-text-details\">\n        <h5\n          className={\n            isDark\n              ? \"experience-text-role dark-mode-text\"\n              : \"experience-text-role\"\n          }\n        >\n          {cardInfo.role}\n        </h5>\n        <h5\n          className={\n            isDark\n              ? \"experience-text-date dark-mode-text\"\n              : \"experience-text-date\"\n          }\n        >\n          {cardInfo.date}\n        </h5>\n        <p\n          className={\n            isDark\n              ? \"subTitle experience-text-desc dark-mode-text\"\n              : \"subTitle experience-text-desc\"\n          }\n        >\n          {cardInfo.desc}\n        </p>\n        <ul>{GetDescBullets(cardInfo.descBullets, isDark)}</ul>\n      </div>\n    </div>\n  );\n};\n\nexport default ExperienceCard;\n","import React, { useContext } from \"react\";\nimport \"./WorkExperience.scss\";\nimport ExperienceCard from \"../../components/ExperienceCard/ExperienceCard\";\nimport { workExperiences } from \"../../config/strings\";\nimport { Fade } from \"react-awesome-reveal\";\nimport StyleContext from \"../../contexts/StyleContext\";\n\nconst WorkExperience: React.FC = () => {\n  const { isDark } = useContext(StyleContext);\n  if (workExperiences.display) {\n    return (\n      <div id=\"experience\">\n        <Fade triggerOnce direction=\"right\" duration={1000}>\n          <div className=\"experience-container\" id=\"workExperience\">\n            <div>\n              <h1 className=\"experience-heading\">Experiences</h1>\n              <div className=\"experience-cards-div\">\n                {workExperiences.experience.map((card, i) => {\n                  return (\n                    <ExperienceCard\n                      key={i}\n                      isDark={isDark}\n                      cardInfo={{\n                        company: card.company,\n                        desc: card.desc,\n                        date: card.date,\n                        rgbColor: card.rgbColor,\n                        companylogo: card.companylogo,\n                        role: card.role,\n                        descBullets: card.descBullets\n                      }}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </Fade>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default WorkExperience;\n"],"sourceRoot":""}